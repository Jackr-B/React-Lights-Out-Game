{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","evt","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","flipCell","every","cell","setState","_this2","tblBoard","_loop","concat","src_Cell_0","key","flipCellsAround","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4922ae75.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Cell.css';\n\nclass Cell extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleClick = this.handleClick.bind(this);\n\t}\n\n\thandleClick(evt) {\n\t\t// call up to the board to flip cells around this cell\n\t\tthis.props.flipCellsAroundMe();\n\t}\n\n\trender() {\n\t\tlet classes = 'Cell' + (this.props.isLit ? ' Cell-lit' : '');\n\n\t\treturn <td className={classes} onClick={this.handleClick} />;\n\t}\n}\n\nexport default Cell;\n","import React, { Component } from 'react';\nimport Cell from './Cell';\nimport './Board.css';\n\nclass Board extends Component {\n\tstatic defaultProps = {\n\t\tnrows: 5,\n\t\tncols: 5,\n\t\tchanceLightStartsOn: 0.25\n\t};\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\thasWon: false,\n\t\t\tboard: this.createBoard()\n\t\t};\n\t}\n\n\tcreateBoard() {\n\t\tlet board = [];\n\t\tfor (let y = 0; y < this.props.nrows; y++) {\n\t\t\tlet row = [];\n\t\t\tfor (let x = 0; x < this.props.ncols; x++) {\n\t\t\t\trow.push(Math.random() < this.props.chanceLightStartsOn);\n\t\t\t}\n\t\t\tboard.push(row);\n\t\t}\n\t\treturn board;\n\t}\n\n\t// handle changing a cell: update board & determine if winner\n\n\tflipCellsAround(coord) {\n\t\tlet { ncols, nrows } = this.props;\n\t\tlet board = this.state.board;\n\t\tlet [ y, x ] = coord.split('-').map(Number);\n\n\t\tfunction flipCell(y, x) {\n\t\t\t// if this coord is actually on board, flip it\n\t\t\tif (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n\t\t\t\tboard[y][x] = !board[y][x];\n\t\t\t}\n\t\t}\n\n\t\tflipCell(y, x); //flip selected cell\n\t\tflipCell(y, x - 1); //flip left\n\t\tflipCell(y, x + 1); //flip right\n\t\tflipCell(y - 1, x); //flip below\n\t\tflipCell(y + 1, x); //flip above\n\n\t\t// win when every cell is turned off\n\t\tlet hasWon = board.every((row) => row.every((cell) => !cell));\n\t\tthis.setState({ board: board, hasWon: hasWon });\n\t}\n\n\t// Render game board or winning message.\n\n\trender() {\n\t\tif (this.state.hasWon) {\n\t\t\treturn (\n\t\t\t\t<div className=\"Board-title\">\n\t\t\t\t\t<div className=\"winning-msg\" />\n\t\t\t\t\t<span className=\"neon-orange\">YOU</span>\n\t\t\t\t\t<span className=\"neon-blue\">WIN</span>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\tlet tblBoard = [];\n\t\tfor (let y = 0; y < this.props.nrows; y++) {\n\t\t\tlet row = [];\n\t\t\tfor (let x = 0; x < this.props.ncols; x++) {\n\t\t\t\tlet coord = `${y}-${x}`;\n\t\t\t\trow.push(\n\t\t\t\t\t<Cell\n\t\t\t\t\t\tkey={coord}\n\t\t\t\t\t\tisLit={this.state.board[y][x]}\n\t\t\t\t\t\tflipCellsAroundMe={() => this.flipCellsAround(coord)}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t}\n\t\t\ttblBoard.push(<tr key={y}>{row}</tr>);\n\t\t}\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"Board-title\">\n\t\t\t\t\t<div className=\"neon-orange\">Lights</div>\n\t\t\t\t\t<div className=\"neon-blue\">Out</div>\n\t\t\t\t</div>\n\t\t\t\t<table className=\"Board\">\n\t\t\t\t\t<tbody>{tblBoard}</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport Board from './Board';\nimport './App.css';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Board />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit http://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tif (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}